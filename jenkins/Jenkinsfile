#!groovy
pipeline {

  agent any

  tools {
    jdk 'jdk 8'
    maven 'mvn 3.8'
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to build')
  }

  environment {
    BRANCH_NAME=env.GIT_BRANCH.replace("origin/", "")
  }

  stages {
    stage ('Get Latest SIT Version From Pact Broker') {
      steps {
        sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.88.83/pact-1.88.83-linux-x86_64.tar.gz'
        sh 'tar xzf pact-1.88.83-linux-x86_64.tar.gz'
        dir('pact/bin') {
          script {
            env.PROD_VERSION = sh(script: "./pact-broker describe-version -a provider-x -b http://localhost:9292 -l SIT | tail -1 | cut -f 1 -d \\|", returnStdout: true).trim()
          }
        }
        echo "Current prod version: " + PROD_VERSION
      }
    }
    stage ('Build & Test') {
      steps {
        script {
          if (env.PROD_VERSION == 'Pacticipant version not found') {
            env.TAG_PROVIDER = 'SIT'
          } else {
            env.TAG_PROVIDER = env.GIT_BRANCH
          }
          sh "mvn clean verify " +
               "-Dpact.provider.version=${GIT_COMMIT} " +
               "-Dpact.verifier.publishResults=true " +
               "-Dpact.provider.tag=${TAG_PROVIDER}"
        }
      }
    }
    stage('Can I deploy on SIT') {
      steps {
        dir('pact/bin') {
          sh "./pact-broker can-i-deploy -a provider-x -b http://localhost:9292 -e ${GIT_COMMIT} --to VC_SIT"
        }
      }
    }
    stage('Tag as verified on SIT') {
      when {
        expression { return env.PROD_VERSION != 'Pacticipant version not found'; }
      }
      steps {
        script {
          sh "mvn clean verify " +
               "-Dpact.provider.version=${GIT_COMMIT} " +
               "-Dpact.verifier.publishResults=true " +
               "-Dpact.provider.tag=SIT"
        }
      }
    }
  }
}