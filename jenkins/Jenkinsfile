#!groovy
pipeline {

  agent any

  tools {
    jdk 'jdk 8'
    maven 'mvn 3.8'
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to build')
  }

  environment {
    SERVICE_NAME = "provider-x"
    BRANCH_NAME = env.GIT_BRANCH.replace("origin/", "")
    PACT_BROKER_URL = "http://localhost:9292"
  }

  stages {
    stage ('Build & Test') {
      steps {
          sh "mvn clean verify -Dpactbroker.consumerversionselectors.tags=SIT_ENV -Dpact.provider.version=${GIT_COMMIT} -Dpact.provider.tag=${GIT_BRANCH} -Dpact.verifier.publishResults=true"
      }
    }
    stage ('Get Latest SIT Version From Pact Broker') {
      steps {
        sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.88.83/pact-1.88.83-linux-x86_64.tar.gz'
        sh 'tar xzf pact-1.88.83-linux-x86_64.tar.gz'
        dir('pact/bin') {
          script {
            env.PROD_VERSION = sh(script: "./pact-broker describe-version -a ${SERVICE_NAME} -b ${PACT_BROKER_URL} -l SIT_ENV | tail -1 | cut -f 1 -d \\|", returnStdout: true).trim()
          }
        }
        echo "Current prod version: " + PROD_VERSION
      }
    }
    stage('Can I deploy on SIT') {
      steps {
        dir('pact/bin') {
          script {
            //Tag the first pass contract as verified on SIT
            if (env.PROD_VERSION == 'Pacticipant version not found') {
              sh "./pact-broker create-version-tag -t SIT_ENV -a ${SERVICE_NAME} -e ${GIT_COMMIT} -b ${PACT_BROKER_URL}"
            }
          }
          sh "./pact-broker can-i-deploy -a ${SERVICE_NAME} -b ${PACT_BROKER_URL} -e ${GIT_COMMIT} --to SIT_ENV"
        }
      }
    }
    stage('Mark as verified on SIT') {
      steps {
        dir('pact/bin') {
          sh "./pact-broker create-version-tag -a ${SERVICE_NAME} -b ${PACT_BROKER_URL} -e ${GIT_COMMIT} -t SIT_ENV"
          sh "./pact-broker record-release --environment=SIT -a ${SERVICE_NAME} -b ${PACT_BROKER_URL} -e ${GIT_COMMIT}"
        }
      }
    }
  }
}